// models/Subscriber.js
const mongoose = require('mongoose');
const { bot } = require('../bot');

const subscriberSchema = new mongoose.Schema({
  chatId: { type: String, required: true, unique: true },
  firstName: String,
  zodiacSign: { type: String, default: null },
  subscribed: { type: Boolean, default: true },
  subscribedAt: { type: Date, default: Date.now },
}, { timestamps: true });

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
subscriberSchema.post('save', async function (doc) {
  if (doc.isNew) {
    try {
      const message = `üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n` +
                      `üí¨ –ò–º—è: ${doc.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                      `üÜî Chat ID: ${doc.chatId}\n` +
                      `üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${doc.createdAt.toLocaleString()}`;
      await bot.telegram.sendMessage(process.env.TELEGRAM_ID, message);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', err);
    }
  } else if (this.isModified && this.isModified('subscribed') && doc.subscribed === true) {
    // –ï—Å–ª–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–º–µ–Ω—è–ª–∏ subscribed ‚Üí true
    try {
      const message = `‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫!\n\n` +
                      `üí¨ –ò–º—è: ${doc.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                      `üÜî Chat ID: ${doc.chatId}\n` +
                      `üìÖ –ü–æ–¥–ø–∏—Å–∞–Ω: ${doc.subscribedAt.toLocaleString()}`;
      await bot.telegram.sendMessage(process.env.TELEGRAM_ID, message);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ:', err);
    }
  }
});

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø—Ä–∏ findOneAndUpdate
 */
subscriberSchema.post('findOneAndUpdate', async function (res) {
  if (!res) return;
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ updatedDoc.subscribed —Å—Ç–∞–ª true
    if (res.subscribed === true) {
      const message = `‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫!\n\n` +
                      `üí¨ –ò–º—è: ${res.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                      `üÜî Chat ID: ${res.chatId}\n` +
                      `üìÖ –ü–æ–¥–ø–∏—Å–∞–Ω: ${res.subscribedAt.toLocaleString()}`;
      await bot.telegram.sendMessage(process.env.TELEGRAM_ID, message);
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ (findOneAndUpdate):', err);
  }
});

module.exports = mongoose.model('Subscriber', subscriberSchema);