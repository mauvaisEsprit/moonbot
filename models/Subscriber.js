// models/Subscriber.js
const mongoose = require('mongoose');
const { bot } = require('../bot');

const subscriberSchema = new mongoose.Schema({
  chatId: { type: String, required: true, unique: true },
  firstName: String,
  zodiacSign: { type: String, default: null },
  subscribed: { type: Boolean, default: true },
  subscribedAt: { type: Date, default: Date.now },
}, { timestamps: true });

// –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, —Å—Ç–∞–≤–∏–º –¥–∞—Ç—É
subscriberSchema.pre('save', function(next) {
  if (this.isModified('subscribed') && this.subscribed === true) {
    this.subscribedAt = new Date();
  }
  next();
});

// –•—É–∫ –¥–ª—è save()
subscriberSchema.post('save', async function(doc) {
  try {
    if (doc.isNew) {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      await bot.telegram.sendMessage(process.env.TELEGRAM_ID,
        `üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nüí¨ –ò–º—è: ${doc.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\nüÜî Chat ID: ${doc.chatId}`
      );
    } else if (this.isModified('subscribed')) {
      // –ü–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞
      const status = doc.subscribed ? '‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫' : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è';
      await bot.telegram.sendMessage(process.env.TELEGRAM_ID,
        `${status}!\nüí¨ –ò–º—è: ${doc.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\nüÜî Chat ID: ${doc.chatId}\nüìÖ –î–∞—Ç–∞: ${doc.subscribedAt ? doc.subscribedAt.toLocaleString() : '-'}`
      );
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ/–æ—Ç–ø–∏—Å–∫–µ:', err);
  }
});

// –•—É–∫ –¥–ª—è findOneAndUpdate (–∞–ø–¥–µ–π—Ç—ã —á–µ—Ä–µ–∑ upsert)
subscriberSchema.post('findOneAndUpdate', async function(res) {
  if (!res) return;
  try {
    const modified = this.getUpdate();
    if (!modified) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø–æ–ª–µ subscribed
    if (modified.subscribed !== undefined) {
      const status = modified.subscribed ? '‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫' : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è';
      await bot.telegram.sendMessage(process.env.TELEGRAM_ID,
       `${status}!\nüí¨ –ò–º—è: ${res.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\nüÜî Chat ID: ${res.chatId}\nüìÖ –î–∞—Ç–∞: ${res.subscribedAt ? res.subscribedAt.toLocaleString() : '-'}`
      );
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ/–æ—Ç–ø–∏—Å–∫–µ (findOneAndUpdate):', err);
  }
});

module.exports = mongoose.model('Subscriber', subscriberSchema);