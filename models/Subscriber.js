// models/Subscriber.js
const mongoose = require('mongoose');
const bot  = require('../bot');

const subscriberSchema = new mongoose.Schema({
  chatId: { type: String, required: true, unique: true },
  firstName: String,
  zodiacSign: { type: String, default: null },
  subscribed: { type: Boolean, default: true },
  subscribedAt: { type: Date, default: Date.now },
}, { timestamps: true });

// =========================
// pre-save: –æ–±–Ω–æ–≤–ª—è–µ–º subscribedAt –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ
// =========================
subscriberSchema.pre('save', function(next) {
  if (this.isModified('subscribed') && this.subscribed === true) {
    console.log(`PRE SAVE HOOK: –ü–æ–¥–ø–∏—Å–∫–∞! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º subscribedAt –¥–ª—è ${this.chatId}`);
    this.subscribedAt = new Date();
  }
  next();
});

// =========================
// post-save: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —Å–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
// =========================
subscriberSchema.post('save', async function(doc) {
  console.log('--- POST SAVE HOOK ---');
  console.log('doc.isNew:', doc.isNew);
  console.log('doc.subscribed:', doc.subscribed);

  try {
    if (doc.isNew) {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
      await bot.sendMessage(process.env.TELEGRAM_ID,
        `üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nüí¨ –ò–º—è: ${doc.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\nüÜî Chat ID: ${doc.chatId}`
      );
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } else if (this.isModified('subscribed')) {
      const status = doc.subscribed ? '‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫' : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è';
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞:', status);
      await bot.sendMessage(process.env.TELEGRAM_ID,
        `${status}!\nüí¨ –ò–º—è: ${doc.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\nüÜî Chat ID: ${doc.chatId}\nüìÖ –î–∞—Ç–∞: ${doc.subscribedAt ? doc.subscribedAt.toLocaleString() : '-'}`
      );
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ/–æ—Ç–ø–∏—Å–∫–µ (save):', err);
  }
});

// =========================
// post-findOneAndUpdate: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ findOneAndUpdate
// =========================
subscriberSchema.post('findOneAndUpdate', async function(res) {
  console.log('--- POST FINDONEANDUPDATE HOOK ---');
  if (!res) {
    console.log('res –ø—É—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º');
    return;
  }
  console.log('res.subscribed:', res.subscribed);

  try {
    const modified = this.getUpdate();
    console.log('getUpdate():', modified);
    if (!modified) {
      console.log('modified –ø—É—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º');
      return;
    }

    if (modified.subscribed !== undefined) {
      const status = modified.subscribed ? '‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫' : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è';
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ findOneAndUpdate:', status);
      await bot.sendMessage(process.env.TELEGRAM_ID,
        `${status}!\nüí¨ –ò–º—è: ${res.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\nüÜî Chat ID: ${res.chatId}\nüìÖ –î–∞—Ç–∞: ${res.subscribedAt ? res.subscribedAt.toLocaleString() : '-'}`
      );
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ findOneAndUpdate –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ/–æ—Ç–ø–∏—Å–∫–µ (findOneAndUpdate):', err);
  }
});

module.exports = mongoose.model('Subscriber', subscriberSchema);