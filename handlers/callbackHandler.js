const Subscriber = require('../models/Subscriber');
const { getZodiacName } = require('../utils/zodiacUtils');
const retroPlanetHandler = require('./retroPlanetHandler');


const ruToEnZodiac = {
  '–û–≤–µ–Ω': 'aries',
  '–¢–µ–ª–µ—Ü': 'taurus',
  '–ë–ª–∏–∑–Ω–µ—Ü—ã': 'gemini',
  '–†–∞–∫': 'cancer',
  '–õ–µ–≤': 'leo',
  '–î–µ–≤–∞': 'virgo',
  '–í–µ—Å—ã': 'libra',
  '–°–∫–æ—Ä–ø–∏–æ–Ω': 'scorpio',
  '–°—Ç—Ä–µ–ª–µ—Ü': 'sagittarius',
  '–ö–æ–∑–µ—Ä–æ–≥': 'capricorn',
  '–í–æ–¥–æ–ª–µ–π': 'aquarius',
  '–†—ã–±—ã': 'pisces'
};

module.exports = async (bot, callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data.startsWith('retro_')) {
  return await retroPlanetHandler(bot, callbackQuery);
}


  if (data.startsWith('zodiac_')) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
    const signRu = data.split('_')[1];
    const signEn = ruToEnZodiac[signRu];
    if (!signEn) {
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞: –∑–Ω–∞–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.' });
      return;
    }

    await Subscriber.findOneAndUpdate(
      { chatId: chatId.toString() },
      { zodiacSign: signEn },
      { new: true }
    );

    await bot.answerCallbackQuery(callbackQuery.id, { text: `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–Ω–∞–∫: ${signRu}` });
    return sendProfile(bot, chatId);
  }

  if (data === 'change_zodiac') {
    await bot.answerCallbackQuery(callbackQuery.id);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ –≤—ã–±–æ—Ä –∑–Ω–∞–∫–∞
    const zodiacSigns = Object.keys(ruToEnZodiac);

    const keyboard = [];
    for (let i = 0; i < zodiacSigns.length; i += 3) {
      keyboard.push(zodiacSigns.slice(i, i + 3).map(sign => ({
        text: sign,
        callback_data: `zodiac_${sign}`
      })));
    }

    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:', {
      reply_markup: { inline_keyboard: keyboard }
    });
    return;
  }

  if (data === 'edit_name') {
    await bot.answerCallbackQuery(callbackQuery.id);
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:');

    global.userStates = global.userStates || {};
    global.userStates[chatId] = 'awaiting_name';
    return;
  }

  if (data === 'subscribe') {
    await Subscriber.findOneAndUpdate({ chatId: chatId.toString() }, { subscribed: true });
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å' });
    return sendProfile(bot, chatId);
  }

  if (data === 'unsubscribe') {
    await Subscriber.findOneAndUpdate({ chatId: chatId.toString() }, { subscribed: false });
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å' });
    return sendProfile(bot, chatId);
  }
};

async function sendProfile(bot, chatId) {
  const user = await Subscriber.findOne({ chatId: chatId.toString() });
  if (!user) {
    return bot.sendMessage(chatId, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
  }

  // –†—É—Å—Å–∫–æ–µ –∏–º—è –∑–Ω–∞–∫–∞
  const zodiacRu = getZodiacName(user.zodiacSign);

  const text = `
üë§ –ü—Ä–æ—Ñ–∏–ª—å:
üí¨ –ò–º—è: ${user.firstName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚ôâ –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ${zodiacRu || '–Ω–µ –≤—ã–±—Ä–∞–Ω'}
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: ${user.subscribed ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–æ—Ç–ø–∏—Å–∞–Ω'}
  `.trim();

  const buttons = [
    [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data: 'edit_name' }],
    [{ text: '‚ôâ –ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞', callback_data: 'change_zodiac' }],
  ];

  if (user.subscribed) {
    buttons.push([{ text: 'üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'unsubscribe' }]);
  } else {
    buttons.push([{ text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'subscribe' }]);
  }

  await bot.sendMessage(chatId, text, {
    reply_markup: { inline_keyboard: buttons }
  });
}
