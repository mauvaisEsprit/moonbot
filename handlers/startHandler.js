const Subscriber = require('../models/Subscriber');
const notifySubscriptionChange = require('../jobs/notifySubs'); // <-- —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

const zodiacSigns = [
  '–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫',
  '–õ–µ–≤', '–î–µ–≤–∞', '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω',
  '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã'
];

module.exports = async (bot, message) => {
  const chatId = message.chat.id.toString();
  const firstName = message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  let user = await Subscriber.findOne({ chatId });

  if (!user) {
    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    user = new Subscriber({ chatId, firstName, subscribed: true, subscribedAt: new Date() });
    await user.save();

    // üî• –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ä–∞–∑—É –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    await notifySubscriptionChange(user);
  } else if (!user.subscribed) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ—Ç–ø–∏—Å–∞–Ω, –Ω–æ –Ω–∞–∂–∞–ª "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
    user.subscribed = true;
    user.subscribedAt = new Date();
    await user.save();

    // üî• –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–¥–ø–∏—Å–∫–µ
    await notifySubscriptionChange(user);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
  const text = `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:`;

  const keyboard = [];
  for (let i = 0; i < zodiacSigns.length; i += 3) {
    keyboard.push(zodiacSigns.slice(i, i + 3).map(sign => ({
      text: sign,
      callback_data: `zodiac_${sign}`
    })));
  }

  await bot.sendMessage(chatId, text, {
    reply_markup: { inline_keyboard: keyboard }
  });
};