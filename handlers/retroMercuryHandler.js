const fs = require('fs');
const path = require('path');
const { getZodiacName } = require('../utils/zodiacUtils');
const Subscriber = require('../models/Subscriber');

function formatDate(dateStr) {
  return new Date(dateStr).toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
  });
}

function getToday() {
  const now = new Date();
  now.setHours(0, 0, 0, 0);
  return now;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–∏–æ–¥ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–∞ –∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∑–Ω–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
module.exports = async function retroMercuryHandler(bot, message) {
  const chatId = message.chat.id;

  try {
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π)
    const user = await Subscriber.findOne({ chatId: chatId.toString() });
    if (!user || !user.zodiacSign) {
      return bot.sendMessage(chatId, '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞.');
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –∏–º—è –∑–Ω–∞–∫–∞
    const zodiacRu = getZodiacName(user.zodiacSign);

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    const filePath = path.join(__dirname, '../data/retrogrades.json');
    const data = JSON.parse(fs.readFileSync(filePath, 'utf-8'));

    // –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ú–µ—Ä–∫—É—Ä–∏—é
    const mercuryPeriods = data["–ú–µ—Ä–∫—É—Ä–∏–π"];
    const today = getToday();

    // –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–∞
    const currentPeriod = mercuryPeriods.find(period => {
      const start = new Date(period.start);
      const end = new Date(period.end);
      return today >= start && today <= end;
    });

    let messageText;

    if (currentPeriod) {
      // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∑–Ω–∞–∫
      const influenceForSign = currentPeriod.influence[zodiacRu] || '–í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à –∑–Ω–∞–∫ –Ω–µ –æ–ø–∏—Å–∞–Ω–æ.';

      messageText =
        `‚òø –°–µ–π—á–∞—Å *–†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π* —Å *${formatDate(currentPeriod.start)}* –ø–æ *${formatDate(currentPeriod.end)}*.\n\n` +
        `üìú *–û–ø–∏—Å–∞–Ω–∏–µ:* ${currentPeriod.description}\n\n` +
        `üîÆ *–í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à –∑–Ω–∞–∫ (${zodiacRu}):*\n${influenceForSign}`;
    } else {
      // –ò–Ω–∞—á–µ ‚Äî –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–∞
      const nextPeriod = mercuryPeriods.find(period => new Date(period.start) > today);
      if (nextPeriod) {
        const influenceForSign = nextPeriod.influence[zodiacRu] || '–í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à –∑–Ω–∞–∫ –Ω–µ –æ–ø–∏—Å–∞–Ω–æ.';

        messageText =
          `‚òø –°–µ–π—á–∞—Å –ú–µ—Ä–∫—É—Ä–∏–π –Ω–µ –≤ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–µ.\n\n` +
          `–°–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥: *${formatDate(nextPeriod.start)}* ‚Äì *${formatDate(nextPeriod.end)}*.\n\n` +
          `üìú *–û–ø–∏—Å–∞–Ω–∏–µ:* ${nextPeriod.description}\n\n` +
          `üîÆ *–í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à –∑–Ω–∞–∫ (${zodiacRu}):*\n${influenceForSign}`;
      } else {
        messageText = '‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—É–¥—É—â–∏—Ö —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö –ú–µ—Ä–∫—É—Ä–∏—è.';
      }
    }

    await bot.sendMessage(chatId, messageText, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ retroMercuryHandler:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–º –ú–µ—Ä–∫—É—Ä–∏–∏.');
  }
};
