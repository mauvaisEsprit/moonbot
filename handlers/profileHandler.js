const Subscriber = require('../models/Subscriber');
const { getZodiacName } = require('../utils/zodiacUtils');

module.exports = async (bot, message) => {
  const chatId = message.chat.id;
  const user = await Subscriber.findOne({ chatId: chatId.toString() });

  if (!user) {
    return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
  }

  const zodiacName = user.zodiacSign ? getZodiacName(user.zodiacSign) : '–Ω–µ –≤—ã–±—Ä–∞–Ω';

  const text = `
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
üí¨ –ò–º—è: ${user.firstName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚ôâ –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ${zodiacName}
üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: ${user.subscribed ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–æ—Ç–ø–∏—Å–∞–Ω'}
  `.trim();

  const buttons = [
    [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data: 'edit_name' }],
    [{ text: '‚ôâ –ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞', callback_data: 'change_zodiac' }],
  ];

  if (user.subscribed) {
    buttons.push([{ text: 'üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'unsubscribe' }]);
  } else {
    buttons.push([{ text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'subscribe' }]);
  }

  await bot.sendMessage(chatId, text, {
    reply_markup: { inline_keyboard: buttons }
  });
};
